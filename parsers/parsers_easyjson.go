// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package parsers

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers(in *jlexer.Lexer, out *WitnessString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(WitnessString, 0, 4)
			} else {
				*out = WitnessString{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 string
			v1 = string(in.String())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers(out *jwriter.Writer, in WitnessString) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.String(string(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v WitnessString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v WitnessString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *WitnessString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *WitnessString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers(l, v)
}
func easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers1(in *jlexer.Lexer, out *VkString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "vk_alpha_1":
			if in.IsNull() {
				in.Skip()
				out.Alpha = nil
			} else {
				in.Delim('[')
				if out.Alpha == nil {
					if !in.IsDelim(']') {
						out.Alpha = make([]string, 0, 4)
					} else {
						out.Alpha = []string{}
					}
				} else {
					out.Alpha = (out.Alpha)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Alpha = append(out.Alpha, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_beta_2":
			if in.IsNull() {
				in.Skip()
				out.Beta = nil
			} else {
				in.Delim('[')
				if out.Beta == nil {
					if !in.IsDelim(']') {
						out.Beta = make([][]string, 0, 2)
					} else {
						out.Beta = [][]string{}
					}
				} else {
					out.Beta = (out.Beta)[:0]
				}
				for !in.IsDelim(']') {
					var v5 []string
					if in.IsNull() {
						in.Skip()
						v5 = nil
					} else {
						in.Delim('[')
						if v5 == nil {
							if !in.IsDelim(']') {
								v5 = make([]string, 0, 4)
							} else {
								v5 = []string{}
							}
						} else {
							v5 = (v5)[:0]
						}
						for !in.IsDelim(']') {
							var v6 string
							v6 = string(in.String())
							v5 = append(v5, v6)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Beta = append(out.Beta, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_gamma_2":
			if in.IsNull() {
				in.Skip()
				out.Gamma = nil
			} else {
				in.Delim('[')
				if out.Gamma == nil {
					if !in.IsDelim(']') {
						out.Gamma = make([][]string, 0, 2)
					} else {
						out.Gamma = [][]string{}
					}
				} else {
					out.Gamma = (out.Gamma)[:0]
				}
				for !in.IsDelim(']') {
					var v7 []string
					if in.IsNull() {
						in.Skip()
						v7 = nil
					} else {
						in.Delim('[')
						if v7 == nil {
							if !in.IsDelim(']') {
								v7 = make([]string, 0, 4)
							} else {
								v7 = []string{}
							}
						} else {
							v7 = (v7)[:0]
						}
						for !in.IsDelim(']') {
							var v8 string
							v8 = string(in.String())
							v7 = append(v7, v8)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Gamma = append(out.Gamma, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_delta_2":
			if in.IsNull() {
				in.Skip()
				out.Delta = nil
			} else {
				in.Delim('[')
				if out.Delta == nil {
					if !in.IsDelim(']') {
						out.Delta = make([][]string, 0, 2)
					} else {
						out.Delta = [][]string{}
					}
				} else {
					out.Delta = (out.Delta)[:0]
				}
				for !in.IsDelim(']') {
					var v9 []string
					if in.IsNull() {
						in.Skip()
						v9 = nil
					} else {
						in.Delim('[')
						if v9 == nil {
							if !in.IsDelim(']') {
								v9 = make([]string, 0, 4)
							} else {
								v9 = []string{}
							}
						} else {
							v9 = (v9)[:0]
						}
						for !in.IsDelim(']') {
							var v10 string
							v10 = string(in.String())
							v9 = append(v9, v10)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.Delta = append(out.Delta, v9)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "IC":
			if in.IsNull() {
				in.Skip()
				out.IC = nil
			} else {
				in.Delim('[')
				if out.IC == nil {
					if !in.IsDelim(']') {
						out.IC = make([][]string, 0, 2)
					} else {
						out.IC = [][]string{}
					}
				} else {
					out.IC = (out.IC)[:0]
				}
				for !in.IsDelim(']') {
					var v11 []string
					if in.IsNull() {
						in.Skip()
						v11 = nil
					} else {
						in.Delim('[')
						if v11 == nil {
							if !in.IsDelim(']') {
								v11 = make([]string, 0, 4)
							} else {
								v11 = []string{}
							}
						} else {
							v11 = (v11)[:0]
						}
						for !in.IsDelim(']') {
							var v12 string
							v12 = string(in.String())
							v11 = append(v11, v12)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.IC = append(out.IC, v11)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers1(out *jwriter.Writer, in VkString) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.Alpha) != 0 {
		const prefix string = ",\"vk_alpha_1\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v13, v14 := range in.Alpha {
				if v13 > 0 {
					out.RawByte(',')
				}
				out.String(string(v14))
			}
			out.RawByte(']')
		}
	}
	if len(in.Beta) != 0 {
		const prefix string = ",\"vk_beta_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v15, v16 := range in.Beta {
				if v15 > 0 {
					out.RawByte(',')
				}
				if v16 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v17, v18 := range v16 {
						if v17 > 0 {
							out.RawByte(',')
						}
						out.String(string(v18))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Gamma) != 0 {
		const prefix string = ",\"vk_gamma_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v19, v20 := range in.Gamma {
				if v19 > 0 {
					out.RawByte(',')
				}
				if v20 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v21, v22 := range v20 {
						if v21 > 0 {
							out.RawByte(',')
						}
						out.String(string(v22))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.Delta) != 0 {
		const prefix string = ",\"vk_delta_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v23, v24 := range in.Delta {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v25, v26 := range v24 {
						if v25 > 0 {
							out.RawByte(',')
						}
						out.String(string(v26))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.IC) != 0 {
		const prefix string = ",\"IC\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v27, v28 := range in.IC {
				if v27 > 0 {
					out.RawByte(',')
				}
				if v28 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v29, v30 := range v28 {
						if v29 > 0 {
							out.RawByte(',')
						}
						out.String(string(v30))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v VkString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v VkString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *VkString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *VkString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers1(l, v)
}
func easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers2(in *jlexer.Lexer, out *PublicSignals) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(PublicSignals, 0, 4)
			} else {
				*out = PublicSignals{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v31 string
			v31 = string(in.String())
			*out = append(*out, v31)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers2(out *jwriter.Writer, in PublicSignals) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v32, v33 := range in {
			if v32 > 0 {
				out.RawByte(',')
			}
			out.String(string(v33))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v PublicSignals) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PublicSignals) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PublicSignals) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PublicSignals) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers2(l, v)
}
func easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers3(in *jlexer.Lexer, out *ProofString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pi_a":
			if in.IsNull() {
				in.Skip()
				out.A = nil
			} else {
				in.Delim('[')
				if out.A == nil {
					if !in.IsDelim(']') {
						out.A = make([]string, 0, 4)
					} else {
						out.A = []string{}
					}
				} else {
					out.A = (out.A)[:0]
				}
				for !in.IsDelim(']') {
					var v34 string
					v34 = string(in.String())
					out.A = append(out.A, v34)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pi_b":
			if in.IsNull() {
				in.Skip()
				out.B = nil
			} else {
				in.Delim('[')
				if out.B == nil {
					if !in.IsDelim(']') {
						out.B = make([][]string, 0, 2)
					} else {
						out.B = [][]string{}
					}
				} else {
					out.B = (out.B)[:0]
				}
				for !in.IsDelim(']') {
					var v35 []string
					if in.IsNull() {
						in.Skip()
						v35 = nil
					} else {
						in.Delim('[')
						if v35 == nil {
							if !in.IsDelim(']') {
								v35 = make([]string, 0, 4)
							} else {
								v35 = []string{}
							}
						} else {
							v35 = (v35)[:0]
						}
						for !in.IsDelim(']') {
							var v36 string
							v36 = string(in.String())
							v35 = append(v35, v36)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.B = append(out.B, v35)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "pi_c":
			if in.IsNull() {
				in.Skip()
				out.C = nil
			} else {
				in.Delim('[')
				if out.C == nil {
					if !in.IsDelim(']') {
						out.C = make([]string, 0, 4)
					} else {
						out.C = []string{}
					}
				} else {
					out.C = (out.C)[:0]
				}
				for !in.IsDelim(']') {
					var v37 string
					v37 = string(in.String())
					out.C = append(out.C, v37)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "protocol":
			out.Protocol = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers3(out *jwriter.Writer, in ProofString) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.A) != 0 {
		const prefix string = ",\"pi_a\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v38, v39 := range in.A {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.String(string(v39))
			}
			out.RawByte(']')
		}
	}
	if len(in.B) != 0 {
		const prefix string = ",\"pi_b\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v40, v41 := range in.B {
				if v40 > 0 {
					out.RawByte(',')
				}
				if v41 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v42, v43 := range v41 {
						if v42 > 0 {
							out.RawByte(',')
						}
						out.String(string(v43))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.C) != 0 {
		const prefix string = ",\"pi_c\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v44, v45 := range in.C {
				if v44 > 0 {
					out.RawByte(',')
				}
				out.String(string(v45))
			}
			out.RawByte(']')
		}
	}
	if in.Protocol != "" {
		const prefix string = ",\"protocol\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.Protocol))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ProofString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ProofString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ProofString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ProofString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers3(l, v)
}
func easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers4(in *jlexer.Lexer, out *PkString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "A":
			if in.IsNull() {
				in.Skip()
				out.A = nil
			} else {
				in.Delim('[')
				if out.A == nil {
					if !in.IsDelim(']') {
						out.A = make([][]string, 0, 2)
					} else {
						out.A = [][]string{}
					}
				} else {
					out.A = (out.A)[:0]
				}
				for !in.IsDelim(']') {
					var v46 []string
					if in.IsNull() {
						in.Skip()
						v46 = nil
					} else {
						in.Delim('[')
						if v46 == nil {
							if !in.IsDelim(']') {
								v46 = make([]string, 0, 4)
							} else {
								v46 = []string{}
							}
						} else {
							v46 = (v46)[:0]
						}
						for !in.IsDelim(']') {
							var v47 string
							v47 = string(in.String())
							v46 = append(v46, v47)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.A = append(out.A, v46)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "B2":
			if in.IsNull() {
				in.Skip()
				out.B2 = nil
			} else {
				in.Delim('[')
				if out.B2 == nil {
					if !in.IsDelim(']') {
						out.B2 = make([][][]string, 0, 2)
					} else {
						out.B2 = [][][]string{}
					}
				} else {
					out.B2 = (out.B2)[:0]
				}
				for !in.IsDelim(']') {
					var v48 [][]string
					if in.IsNull() {
						in.Skip()
						v48 = nil
					} else {
						in.Delim('[')
						if v48 == nil {
							if !in.IsDelim(']') {
								v48 = make([][]string, 0, 2)
							} else {
								v48 = [][]string{}
							}
						} else {
							v48 = (v48)[:0]
						}
						for !in.IsDelim(']') {
							var v49 []string
							if in.IsNull() {
								in.Skip()
								v49 = nil
							} else {
								in.Delim('[')
								if v49 == nil {
									if !in.IsDelim(']') {
										v49 = make([]string, 0, 4)
									} else {
										v49 = []string{}
									}
								} else {
									v49 = (v49)[:0]
								}
								for !in.IsDelim(']') {
									var v50 string
									v50 = string(in.String())
									v49 = append(v49, v50)
									in.WantComma()
								}
								in.Delim(']')
							}
							v48 = append(v48, v49)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.B2 = append(out.B2, v48)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "B1":
			if in.IsNull() {
				in.Skip()
				out.B1 = nil
			} else {
				in.Delim('[')
				if out.B1 == nil {
					if !in.IsDelim(']') {
						out.B1 = make([][]string, 0, 2)
					} else {
						out.B1 = [][]string{}
					}
				} else {
					out.B1 = (out.B1)[:0]
				}
				for !in.IsDelim(']') {
					var v51 []string
					if in.IsNull() {
						in.Skip()
						v51 = nil
					} else {
						in.Delim('[')
						if v51 == nil {
							if !in.IsDelim(']') {
								v51 = make([]string, 0, 4)
							} else {
								v51 = []string{}
							}
						} else {
							v51 = (v51)[:0]
						}
						for !in.IsDelim(']') {
							var v52 string
							v52 = string(in.String())
							v51 = append(v51, v52)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.B1 = append(out.B1, v51)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "C":
			if in.IsNull() {
				in.Skip()
				out.C = nil
			} else {
				in.Delim('[')
				if out.C == nil {
					if !in.IsDelim(']') {
						out.C = make([][]string, 0, 2)
					} else {
						out.C = [][]string{}
					}
				} else {
					out.C = (out.C)[:0]
				}
				for !in.IsDelim(']') {
					var v53 []string
					if in.IsNull() {
						in.Skip()
						v53 = nil
					} else {
						in.Delim('[')
						if v53 == nil {
							if !in.IsDelim(']') {
								v53 = make([]string, 0, 4)
							} else {
								v53 = []string{}
							}
						} else {
							v53 = (v53)[:0]
						}
						for !in.IsDelim(']') {
							var v54 string
							v54 = string(in.String())
							v53 = append(v53, v54)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.C = append(out.C, v53)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "nVars":
			out.NVars = int(in.Int())
		case "nPublic":
			out.NPublic = int(in.Int())
		case "vk_alpha_1":
			if in.IsNull() {
				in.Skip()
				out.VkAlpha1 = nil
			} else {
				in.Delim('[')
				if out.VkAlpha1 == nil {
					if !in.IsDelim(']') {
						out.VkAlpha1 = make([]string, 0, 4)
					} else {
						out.VkAlpha1 = []string{}
					}
				} else {
					out.VkAlpha1 = (out.VkAlpha1)[:0]
				}
				for !in.IsDelim(']') {
					var v55 string
					v55 = string(in.String())
					out.VkAlpha1 = append(out.VkAlpha1, v55)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_delta_1":
			if in.IsNull() {
				in.Skip()
				out.VkDelta1 = nil
			} else {
				in.Delim('[')
				if out.VkDelta1 == nil {
					if !in.IsDelim(']') {
						out.VkDelta1 = make([]string, 0, 4)
					} else {
						out.VkDelta1 = []string{}
					}
				} else {
					out.VkDelta1 = (out.VkDelta1)[:0]
				}
				for !in.IsDelim(']') {
					var v56 string
					v56 = string(in.String())
					out.VkDelta1 = append(out.VkDelta1, v56)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_beta_1":
			if in.IsNull() {
				in.Skip()
				out.VkBeta1 = nil
			} else {
				in.Delim('[')
				if out.VkBeta1 == nil {
					if !in.IsDelim(']') {
						out.VkBeta1 = make([]string, 0, 4)
					} else {
						out.VkBeta1 = []string{}
					}
				} else {
					out.VkBeta1 = (out.VkBeta1)[:0]
				}
				for !in.IsDelim(']') {
					var v57 string
					v57 = string(in.String())
					out.VkBeta1 = append(out.VkBeta1, v57)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_beta_2":
			if in.IsNull() {
				in.Skip()
				out.VkBeta2 = nil
			} else {
				in.Delim('[')
				if out.VkBeta2 == nil {
					if !in.IsDelim(']') {
						out.VkBeta2 = make([][]string, 0, 2)
					} else {
						out.VkBeta2 = [][]string{}
					}
				} else {
					out.VkBeta2 = (out.VkBeta2)[:0]
				}
				for !in.IsDelim(']') {
					var v58 []string
					if in.IsNull() {
						in.Skip()
						v58 = nil
					} else {
						in.Delim('[')
						if v58 == nil {
							if !in.IsDelim(']') {
								v58 = make([]string, 0, 4)
							} else {
								v58 = []string{}
							}
						} else {
							v58 = (v58)[:0]
						}
						for !in.IsDelim(']') {
							var v59 string
							v59 = string(in.String())
							v58 = append(v58, v59)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.VkBeta2 = append(out.VkBeta2, v58)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "vk_delta_2":
			if in.IsNull() {
				in.Skip()
				out.VkDelta2 = nil
			} else {
				in.Delim('[')
				if out.VkDelta2 == nil {
					if !in.IsDelim(']') {
						out.VkDelta2 = make([][]string, 0, 2)
					} else {
						out.VkDelta2 = [][]string{}
					}
				} else {
					out.VkDelta2 = (out.VkDelta2)[:0]
				}
				for !in.IsDelim(']') {
					var v60 []string
					if in.IsNull() {
						in.Skip()
						v60 = nil
					} else {
						in.Delim('[')
						if v60 == nil {
							if !in.IsDelim(']') {
								v60 = make([]string, 0, 4)
							} else {
								v60 = []string{}
							}
						} else {
							v60 = (v60)[:0]
						}
						for !in.IsDelim(']') {
							var v61 string
							v61 = string(in.String())
							v60 = append(v60, v61)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.VkDelta2 = append(out.VkDelta2, v60)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "hExps":
			if in.IsNull() {
				in.Skip()
				out.HExps = nil
			} else {
				in.Delim('[')
				if out.HExps == nil {
					if !in.IsDelim(']') {
						out.HExps = make([][]string, 0, 2)
					} else {
						out.HExps = [][]string{}
					}
				} else {
					out.HExps = (out.HExps)[:0]
				}
				for !in.IsDelim(']') {
					var v62 []string
					if in.IsNull() {
						in.Skip()
						v62 = nil
					} else {
						in.Delim('[')
						if v62 == nil {
							if !in.IsDelim(']') {
								v62 = make([]string, 0, 4)
							} else {
								v62 = []string{}
							}
						} else {
							v62 = (v62)[:0]
						}
						for !in.IsDelim(']') {
							var v63 string
							v63 = string(in.String())
							v62 = append(v62, v63)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.HExps = append(out.HExps, v62)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "domainSize":
			out.DomainSize = int(in.Int())
		case "polsA":
			if in.IsNull() {
				in.Skip()
				out.PolsA = nil
			} else {
				in.Delim('[')
				if out.PolsA == nil {
					if !in.IsDelim(']') {
						out.PolsA = make([]map[string]string, 0, 8)
					} else {
						out.PolsA = []map[string]string{}
					}
				} else {
					out.PolsA = (out.PolsA)[:0]
				}
				for !in.IsDelim(']') {
					var v64 map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v64 = make(map[string]string)
						} else {
							v64 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v65 string
							v65 = string(in.String())
							(v64)[key] = v65
							in.WantComma()
						}
						in.Delim('}')
					}
					out.PolsA = append(out.PolsA, v64)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "polsB":
			if in.IsNull() {
				in.Skip()
				out.PolsB = nil
			} else {
				in.Delim('[')
				if out.PolsB == nil {
					if !in.IsDelim(']') {
						out.PolsB = make([]map[string]string, 0, 8)
					} else {
						out.PolsB = []map[string]string{}
					}
				} else {
					out.PolsB = (out.PolsB)[:0]
				}
				for !in.IsDelim(']') {
					var v66 map[string]string
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v66 = make(map[string]string)
						} else {
							v66 = nil
						}
						for !in.IsDelim('}') {
							key := string(in.String())
							in.WantColon()
							var v67 string
							v67 = string(in.String())
							(v66)[key] = v67
							in.WantComma()
						}
						in.Delim('}')
					}
					out.PolsB = append(out.PolsB, v66)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers4(out *jwriter.Writer, in PkString) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.A) != 0 {
		const prefix string = ",\"A\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v68, v69 := range in.A {
				if v68 > 0 {
					out.RawByte(',')
				}
				if v69 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v70, v71 := range v69 {
						if v70 > 0 {
							out.RawByte(',')
						}
						out.String(string(v71))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.B2) != 0 {
		const prefix string = ",\"B2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v72, v73 := range in.B2 {
				if v72 > 0 {
					out.RawByte(',')
				}
				if v73 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v74, v75 := range v73 {
						if v74 > 0 {
							out.RawByte(',')
						}
						if v75 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
							out.RawString("null")
						} else {
							out.RawByte('[')
							for v76, v77 := range v75 {
								if v76 > 0 {
									out.RawByte(',')
								}
								out.String(string(v77))
							}
							out.RawByte(']')
						}
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.B1) != 0 {
		const prefix string = ",\"B1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v78, v79 := range in.B1 {
				if v78 > 0 {
					out.RawByte(',')
				}
				if v79 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v80, v81 := range v79 {
						if v80 > 0 {
							out.RawByte(',')
						}
						out.String(string(v81))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.C) != 0 {
		const prefix string = ",\"C\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v82, v83 := range in.C {
				if v82 > 0 {
					out.RawByte(',')
				}
				if v83 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v84, v85 := range v83 {
						if v84 > 0 {
							out.RawByte(',')
						}
						out.String(string(v85))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if in.NVars != 0 {
		const prefix string = ",\"nVars\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NVars))
	}
	if in.NPublic != 0 {
		const prefix string = ",\"nPublic\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.NPublic))
	}
	if len(in.VkAlpha1) != 0 {
		const prefix string = ",\"vk_alpha_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v86, v87 := range in.VkAlpha1 {
				if v86 > 0 {
					out.RawByte(',')
				}
				out.String(string(v87))
			}
			out.RawByte(']')
		}
	}
	if len(in.VkDelta1) != 0 {
		const prefix string = ",\"vk_delta_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v88, v89 := range in.VkDelta1 {
				if v88 > 0 {
					out.RawByte(',')
				}
				out.String(string(v89))
			}
			out.RawByte(']')
		}
	}
	if len(in.VkBeta1) != 0 {
		const prefix string = ",\"vk_beta_1\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v90, v91 := range in.VkBeta1 {
				if v90 > 0 {
					out.RawByte(',')
				}
				out.String(string(v91))
			}
			out.RawByte(']')
		}
	}
	if len(in.VkBeta2) != 0 {
		const prefix string = ",\"vk_beta_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v92, v93 := range in.VkBeta2 {
				if v92 > 0 {
					out.RawByte(',')
				}
				if v93 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v94, v95 := range v93 {
						if v94 > 0 {
							out.RawByte(',')
						}
						out.String(string(v95))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.VkDelta2) != 0 {
		const prefix string = ",\"vk_delta_2\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v96, v97 := range in.VkDelta2 {
				if v96 > 0 {
					out.RawByte(',')
				}
				if v97 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v98, v99 := range v97 {
						if v98 > 0 {
							out.RawByte(',')
						}
						out.String(string(v99))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.HExps) != 0 {
		const prefix string = ",\"hExps\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v100, v101 := range in.HExps {
				if v100 > 0 {
					out.RawByte(',')
				}
				if v101 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v102, v103 := range v101 {
						if v102 > 0 {
							out.RawByte(',')
						}
						out.String(string(v103))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	if in.DomainSize != 0 {
		const prefix string = ",\"domainSize\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.DomainSize))
	}
	if len(in.PolsA) != 0 {
		const prefix string = ",\"polsA\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v104, v105 := range in.PolsA {
				if v104 > 0 {
					out.RawByte(',')
				}
				if v105 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v106First := true
					for v106Name, v106Value := range v105 {
						if v106First {
							v106First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v106Name))
						out.RawByte(':')
						out.String(string(v106Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	if len(in.PolsB) != 0 {
		const prefix string = ",\"polsB\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		{
			out.RawByte('[')
			for v107, v108 := range in.PolsB {
				if v107 > 0 {
					out.RawByte(',')
				}
				if v108 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v109First := true
					for v109Name, v109Value := range v108 {
						if v109First {
							v109First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v109Name))
						out.RawByte(':')
						out.String(string(v109Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PkString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PkString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonF43c866aEncodeGithubComTaubyteGoSnarkParsers4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PkString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PkString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonF43c866aDecodeGithubComTaubyteGoSnarkParsers4(l, v)
}
